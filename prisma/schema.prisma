// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")  // Utilise la variable d'environnement
}

model User {
  id              String   @id @default(uuid())  // ID unique de l'utilisateur
  username        String   @unique  // Nom d'utilisateur unique
  password        String   // Mot de passe (doit être haché)
  firstName       String   // Prénom
  lastName        String   // Nom
  email           String   @unique  // Email unique
  emailVerified   Boolean  @default(false)  // Si l'email est vérifié
  role            Role     @default(USER)  // Rôle de l'utilisateur (par exemple, USER)
  active          Boolean  @default(true)  // Statut actif ou non de l'utilisateur
  idCardVerified  Boolean  @default(false)  // Si la carte d'identité est vérifiée
  birthDate       DateTime // Date de naissance
  profilePicture  String?  // URL de la photo de profil
  city            String  // Ville Doit pas être optionnel
  country         String  // Pays Doit pas être optionnel
  createdAt       DateTime @default(now())  // Date de création
  updatedAt       DateTime @updatedAt  // Date de dernière mise à jour

  // Relations avec les offres
  vehicleOffers   VehicleOffer[]
  realEstateOffers RealEstateOffer[]
  commercialOffers CommercialOffer[]

  // Messages envoyés et reçus
  messagesSent    Message[] @relation("UserSentMessages")
  messagesReceived Message[] @relation("UserReceivedMessages")

  // Signalements soumis
  reportsSubmitted Report[] @relation("UserSubmittedReports")
}

// Modèle pour les entreprises
model Company {
  id             String   @id @default(uuid())  // ID unique de l'entreprise
  companyName    String   @unique// Nom de l'entreprise DOIT ÊTRE UNIQUE
  password       String   // Mot de passe (doit être haché)
  email          String   @unique  // Email unique
  emailVerified  Boolean  @default(false)  // Si l'email est vérifié
  role           Role     @default(COMPANY)  // Rôle de l'entreprise (par exemple, COMPANY)
  active         Boolean  @default(true)  // Statut actif ou non de l'entreprise
  companyNumber  String  @unique  // Numéro d'enregistrement unique de l'entreprise
  birthDate      DateTime? // Date de création de l'entreprise (ou date d'enregistrement)
  profilePicture String?  // URL de la photo de profil ou logo de l'entreprise
  city           String  // Ville
  country        String  // Pays
  street         String  // Pays
  createdAt      DateTime @default(now())  // Date de création
  updatedAt      DateTime @updatedAt  // Date de dernière mise à jour

  // Relations avec les offres
  vehicleOffers  VehicleOffer[]
  realEstateOffers RealEstateOffer[]
  commercialOffers CommercialOffer[]

  // Messages envoyés et reçus
  messagesSent      Message[] @relation("CompanySentMessages")
  messagesReceived  Message[] @relation("CompanyReceivedMessages")

  // Signalements soumis
  reportsSubmitted  Report[] @relation("CompanySubmittedReports")
}


model VehicleOffer {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  city        String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Champs spécifiques aux véhicules
  vehicleType  String   // Type de vehicule (voiture, Moto, etc.)
  model         String
  year          Int
  mileage       Int
  fuelType      String
  color         String
  transmission  String

  photos        String[]


  userId       String?
  companyId    String?

  user         User?    @relation(fields: [userId], references: [id])
  company      Company? @relation(fields: [companyId], references: [id])

  // Messages et signalements liés à l'offre
  messages     Message[] @relation("VehicleOfferMessages")
  reports      Report[]
}

model RealEstateOffer {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  price         Float
  city          String
  country       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Champs spécifiques à l'immobilier
  propertyType  String   // Type de propriété (Appartement, Maison, etc.)
  surface       Float    // Surface en m²
  rooms         Int      // Nombre de pièces
  bedrooms      Int      // Nombre de chambres
  bathrooms     Int      // Nombre de salles de bain
  heatingType   String   // Type de chauffage (Gaz, Électrique, etc.)
  energyClass   String   // Classe énergétique (A, B, C, etc.)
  furnished     Boolean  // Meublé ou non
  
  photos        String[]


  userId        String?
  companyId     String?

  user          User?    @relation(fields: [userId], references: [id])
  company       Company? @relation(fields: [companyId], references: [id])

  // Messages et signalements liés à l'offre
  messages      Message[] @relation("RealEstateOfferMessages")
  reports       Report[]
}


model CommercialOffer {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  city        String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Champs spécifiques au commercial
  commercialType String  // Type d'offre commerciale (Produit, Service, etc.)
  duration       Int?    // Durée de validité de l'offre (en jours)
  photos         String[]

  userId       String?
  companyId    String?

  user         User?    @relation(fields: [userId], references: [id])
  company      Company? @relation(fields: [companyId], references: [id])

  // Messages et signalements liés à l'offre
  messages     Message[] @relation("CommercialOfferMessages")
  reports      Report[]
}


model Message {
  id                 Int              @id @default(autoincrement())
  senderUserId       String?          // Clé étrangère pour l'utilisateur envoyant le message
  senderCompanyId    String?          // Clé étrangère pour l'entreprise envoyant le message
  receiverUserId     String?          // Clé étrangère pour l'utilisateur recevant le message
  receiverCompanyId  String?          // Clé étrangère pour l'entreprise recevant le message
  content            String
  sentAt             DateTime         @default(now())
  read               Boolean          @default(false)
  
  vehicleOfferId     Int?             // Clé étrangère pour une offre de véhicule
  realEstateOfferId  Int?             // Clé étrangère pour une offre immobilière
  commercialOfferId  Int?             // Clé étrangère pour une offre commerciale

<<<<<<< HEAD
  senderUser       User?       @relation("UserSentMessages", fields: [senderId], references: [id], map: "Message_senderUser_fkey")
  senderCompany    Company?    @relation("CompanySentMessages", fields: [senderId], references: [id], map: "Message_senderCompany_fkey")
  receiverUser     User?       @relation("UserReceivedMessages", fields: [receiverId], references: [id], map: "Message_receiverUser_fkey")
  receiverCompany  Company?    @relation("CompanyReceivedMessages", fields: [receiverId], references: [id], map: "Message_receiverCompany_fkey")

  vehicleOffer     VehicleOffer?    @relation("VehicleOfferMessages", fields: [offerId], references: [id], map: "Message_vehicleOffer_fkey")
  realEstateOffer  RealEstateOffer? @relation("RealEstateOfferMessages", fields: [offerId], references: [id], map: "Message_realEstateOffer_fkey")
  commercialOffer  CommercialOffer? @relation("CommercialOfferMessages", fields: [offerId], references: [id], map: "Message_commercialOffer_fkey")
  offerId          Int?

  @@index([senderId], name: "idx_senderId")
  @@index([receiverId], name: "idx_receiverId")
  @@index([offerId], name: "idx_offerId")
=======
  // Relations avec les utilisateurs ou entreprises
  senderUser         User?            @relation("UserSentMessages", fields: [senderUserId], references: [id])
  senderCompany      Company?         @relation("CompanySentMessages", fields: [senderCompanyId], references: [id])
  receiverUser       User?            @relation("UserReceivedMessages", fields: [receiverUserId], references: [id])
  receiverCompany    Company?         @relation("CompanyReceivedMessages", fields: [receiverCompanyId], references: [id])

  // Relations avec les catégories d'offres
  vehicleOffer       VehicleOffer?    @relation("VehicleOfferMessages", fields: [vehicleOfferId], references: [id])
  realEstateOffer    RealEstateOffer? @relation("RealEstateOfferMessages", fields: [realEstateOfferId], references: [id])
  commercialOffer    CommercialOffer? @relation("CommercialOfferMessages", fields: [commercialOfferId], references: [id])

  @@index([senderUserId], name: "idx_senderUserId")
  @@index([senderCompanyId], name: "idx_senderCompanyId")
  @@index([receiverUserId], name: "idx_receiverUserId")
  @@index([receiverCompanyId], name: "idx_receiverCompanyId")
  @@index([vehicleOfferId], name: "idx_vehicle_offer")
  @@index([realEstateOfferId], name: "idx_real_estate_offer")
  @@index([commercialOfferId], name: "idx_commercial_offer")
>>>>>>> dev
}



// Modèle pour les signalements
model Report {
  id            Int      @id @default(autoincrement())
  reason        String
  createdAt     DateTime @default(now())
  status        String   @default("pending")

  // Relation avec les différentes catégories d'offres
  vehicleOfferId     Int?
  vehicleOffer       VehicleOffer?    @relation(fields: [vehicleOfferId], references: [id], map: "Report_vehicleOffer_fkey")

  realEstateOfferId  Int?
  realEstateOffer    RealEstateOffer? @relation(fields: [realEstateOfferId], references: [id], map: "Report_realEstateOffer_fkey")

  commercialOfferId  Int?
  commercialOffer    CommercialOffer? @relation(fields: [commercialOfferId], references: [id], map: "Report_commercialOffer_fkey")

  // Relation avec le rapporteur
  reporterId    String
  reporterType  ReporterType
  reporterUser  User?         @relation("UserSubmittedReports", fields: [reporterId], references: [id], map: "Report_reporterUser_fkey")
  reporterCompany Company?    @relation("CompanySubmittedReports", fields: [reporterId], references: [id], map: "Report_reporterCompany_fkey")

  @@index([vehicleOfferId], name: "idx_vehicleOfferId")
  @@index([realEstateOfferId], name: "idx_realEstateOfferId")
  @@index([commercialOfferId], name: "idx_commercialOfferId")
  @@index([reporterId], name: "idx_reporterId")
}

// Enum pour les rôles
enum Role {
  USER
  ADMIN
  MODERATOR
  COMPANY
}

// enum pour les sous catègories
enum Category {
  Vehicle
  RealEstate
  commercial
}
// Enum pour les types de reporteur (utilisateur ou entreprise)
enum ReporterType {
  USER
  COMPANY
}
