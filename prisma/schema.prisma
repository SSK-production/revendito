// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")  // Utilise la variable d'environnement
}


// Modèle pour les utilisateurs
model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  identityNumber String   @unique
  address        String
  city           String
  country        String   
  profilePhoto   String?
  email          String   @unique
  emailVerified  Boolean  @default(false)
  role           Role     @default(USER)
  active         Boolean  @default(true)

  // Relation avec les offres
  offers         Offer[]  

  // Messages envoyés et reçus
  messagesSent   Message[] @relation("UserSentMessages")
  messagesReceived Message[] @relation("UserReceivedMessages")

  // Signalements d'offres
  reportsSubmitted Report[] @relation("UserSubmittedReports")

  @@index([identityNumber], name: "idx_identityNumber")
}

// Modèle pour les entreprises
model Company {
  id                String   @id @default(uuid())
  companyName       String
  registrationNumber String   @unique
  address           String
  city              String
  country           String   
  companyLogo       String?
  email             String   @unique
  emailVerified     Boolean  @default(false)
  role              Role     @default(COMPANY)
  active            Boolean  @default(true)

  // Relation avec les offres
  offers            Offer[]  

  // Messages envoyés et reçus
  messagesSent      Message[] @relation("CompanySentMessages")
  messagesReceived  Message[] @relation("CompanyReceivedMessages")

  // Signalements d'offres
  reportsSubmitted Report[] @relation("CompanySubmittedReports")

  @@index([registrationNumber], name: "idx_registrationNumber")
}

// Modèle pour les catégories (marques de voitures)
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique  // Le nom de la marque de voiture
  offers    Offer[]  // Relation avec les offres
}

// Mise à jour du modèle Offer pour inclure une relation avec Category
model Offer {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  price       Float
  city        String
  country     String  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("active")

  model         String     // Modèle de la voiture (ex : 308, Corolla, etc.)
  year          Int        // Année de fabrication
  mileage       Int        // Kilométrage de la voiture en kilomètres
  fuelType      String     // Type de carburant (Essence, Diesel, Électrique, etc.)
  color         String     // Couleur de la voiture
  transmission  String     // Type de transmission (Manuelle, Automatique)

  userId      String?
  companyId   String?

  user        User?     @relation(fields: [userId], references: [id])
  company     Company?  @relation(fields: [companyId], references: [id])

  reports     Report[]

  messages    Message[] @relation("OfferMessageRelation")

  // Ajout de la relation avec Category
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
}




// Modèle pour les messages
model Message {
  id               Int      @id @default(autoincrement())
  senderId         String?
  receiverId       String?
  content          String
  sentAt           DateTime @default(now())
  read             Boolean  @default(false)

  // Relation avec l'utilisateur qui envoie le message
  senderUser       User?     @relation("UserSentMessages", fields: [senderId], references: [id], map: "Message_senderUser_fkey")

  // Relation avec l'utilisateur qui reçoit le message
  receiverUser     User?     @relation("UserReceivedMessages", fields: [receiverId], references: [id], map: "Message_receiverUser_fkey")

  senderCompany    Company?  @relation("CompanySentMessages", fields: [senderId], references: [id], map: "Message_senderCompany_fkey")
  receiverCompany  Company?  @relation("CompanyReceivedMessages", fields: [receiverId], references: [id], map: "Message_receiverCompany_fkey")

  offer            Offer?    @relation("OfferMessageRelation", fields: [offerId], references: [id], map: "Message_offer_fkey")
  offerId          Int?

  @@index([senderId], name: "idx_senderId")
  @@index([receiverId], name: "idx_receiverId")
  @@index([offerId], name: "idx_offerId")
}


model Report {
  id            Int           @id @default(autoincrement())
  reason        String
  createdAt     DateTime      @default(now())

  offerId       Int
  offer         Offer         @relation(fields: [offerId], references: [id], map: "Report_offer_fkey")

  reporterId    String
  reporterType  ReporterType

  reporterUser  User?         @relation("UserSubmittedReports", fields: [reporterId], references: [id], map: "Report_reporterUser_fkey")
  reporterCompany Company?    @relation("CompanySubmittedReports", fields: [reporterId], references: [id], map: "Report_reporterCompany_fkey")

  status        String        @default("pending")

  @@index([offerId], name: "idx_report_offerId")
  @@index([reporterId], name: "idx_report_reporterId")
}



// Enum pour les rôles
enum Role {
  USER
  ADMIN
  MODERATOR
  COMPANY
}

// Enum pour les types de reporteur (utilisateur ou entreprise)
enum ReporterType {
  USER
  COMPANY
}
